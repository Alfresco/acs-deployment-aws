---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Bastion Stack that Deploys EKS and links a NodeRole to it."

Parameters:
    VPCID:
      Description: "ID for the VPC"
      Type: "AWS::EC2::VPC::Id"
    PublicSubnet1:
      Description: "ID of Public Subnet 1"
      Type: "AWS::EC2::Subnet::Id"    
    PublicSubnet2:
      Description: "ID of Public Subnet 2"
      Type: "AWS::EC2::Subnet::Id"   
    PrivateSubnet1:
      Description: "ID of Private Subnet 1"
      Type: "AWS::EC2::Subnet::Id"   
    PrivateSubnet2:
      Description: "ID of Private Subnet 2"
      Type: "AWS::EC2::Subnet::Id"
    InstanceRole:
      Description: "Instance Role ARN"
      Type: "String"
    EKSServiceRole:
      Description: "EKS Service Role ARN"
      Type: "String"
    KeyPairName:
      Description: "The name of an existing public/private key pair, which allows you to securely connect to your instance after it launches"
      Type: "AWS::EC2::KeyPair::KeyName"
    RemoteAccessCIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
      ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/x"
      Description: "The CIDR IP range that is permitted to access the AWS resources. It is recommended that you set this value to a trusted IP range."
      Type: "String"
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must exist in the VPC

Resources:

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-k8s-controlplane" 
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPCID

  BastionInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: aws-quick-start-s3-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject
                Resource: arn:aws:s3:::aws-quickstart/quickstart-linux-bastion/*
                Effect: Allow
        - PolicyName: bastion-cloudwatch-logs-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:GetLogEvents
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutRetentionPolicy
                  - logs:PutMetricFilter
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${BastionMainLogGroup}:*"
                Effect: Allow
        - PolicyName: bastion-eip-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ec2:AssociateAddress
                  - ec2:DescribeAddresses
                Resource: "*"
                Effect: Allow
        - PolicyName: eks-cluster-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - eks:*
                  - sts:*
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: "2012-10-17"

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionInstanceRole
      Path: /


  BastionMainLogGroup:
    Type: AWS::Logs::LogGroup

  SSHMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName: !Ref BastionMainLogGroup
      FilterPattern: ON FROM USER PWD
      MetricTransformations:
        - MetricName: SSHCommandCount
          MetricValue: 1
          MetricNamespace: !Join 
            - /
            - - AWSQuickStart
              - !Ref 'AWS::StackName'

  BastionEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref BastionLaunchConfiguration
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MinSize: 1
      MaxSize: 1
      Cooldown: "300"
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-k8s-bastion"
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT40M

  BastionLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref BastionInstanceRole
          buckets: aws-quickstart
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/bastion_bootstrap.sh:
              source: https://aws-quickstart.s3.amazonaws.com/quickstart-linux-bastion/scripts/bastion_bootstrap.sh
              mode: "000550"
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/eks_bootstrap.sh:
              content:
                Fn::Join: [
                  "",
                  [
                    "#!/bin/bash\n",
                    "echo Checking whether cluster exists...\n",
                    "aws eks describe-cluster --region ", { Ref: "AWS::Region" }, " --name ", { Ref: "AWS::StackName" }, "-cluster &> /dev/null\n",
                    "if [ $? -ne 0 ]; then\n",
                    "  echo Cluster does not exist, creating...\n",
                    "  aws eks create-cluster --region ", { Ref: "AWS::Region" },
                    " --name ", { Ref: "AWS::StackName" }, "-cluster",
                    " --role-arn ", { Ref: EKSServiceRole },
                    " --resources-vpc-config subnetIds=", { Ref: PrivateSubnet1 }, ",", { Ref: PrivateSubnet2 },
                    ",securityGroupIds=", { Ref: "ControlPlaneSecurityGroup" }, "\n",
                    "  if [ $? -ne 0 ]; then\n",
                    "    exit 1\n",
                    "  fi\n",
                    "  sleep 5\n",
                    "  STATUS=$(aws eks describe-cluster --region ", { Ref: "AWS::Region" }, " --name ", { Ref: "AWS::StackName" }, "-cluster --query cluster.status --output text)\n",
                    "  while [ \"$STATUS\" = \"CREATING\" ]; do\n",
                    "    echo Cluster is still creating, sleeping for 30 seconds...\n",
                    "    sleep 30\n",
                    "    STATUS=$(aws eks describe-cluster --region ", { Ref: "AWS::Region" }, " --name ", { Ref: "AWS::StackName" }, "-cluster --query cluster.status --output text)\n",
                    "  done\n",
                    "fi\n",
                    "echo Updating kubeconfig file...\n",
                    "ENDPOINT=$(aws eks describe-cluster --region ", { Ref: "AWS::Region" }, " --name ", { Ref: "AWS::StackName" } , "-cluster --query cluster.endpoint --output text)\n",
                    "CERT_DATA=$(aws eks describe-cluster --region ", { Ref: "AWS::Region" }, " --name ", { Ref: "AWS::StackName" } , "-cluster --query cluster.certificateAuthority.data --output text)\n",
                    "sed -i s,ENDPOINT,$ENDPOINT,g /home/ec2-user/.kube/config\n",
                    "sed -i s,CERTIFICATE_DATA,$CERT_DATA,g /home/ec2-user/.kube/config\n",
                    "export KUBECONFIG=/home/ec2-user/.kube/config\n",
                    "echo Checking whether aws-auth configmap exists...\n",
                    "kubectl get configmaps/aws-auth -n kube-system &> /dev/null\n",
                    "if [ $? -gt 0 ]; then\n",
                    "  echo Configmap does not exist, applying...\n",
                    "  kubectl apply -f /tmp/aws-auth-cm.yaml\n",
                    "fi\n"
                  ]
                ]
              mode: "000750"
              owner: root
              group: root
            /tmp/aws-auth-cm.yaml:
              content: 
                Fn::Join: [
                  "",
                  [
                    "apiVersion: v1\n",
                    "kind: ConfigMap\n",
                    "metadata:\n",
                    "  name: aws-auth\n",
                    "  namespace: kube-system\n",
                    "data:\n",
                    "  mapRoles: |\n",
                    "    - rolearn: ", { Ref: InstanceRole }, "\n",
                    "      username: system:node:{{EC2PrivateDNSName}}\n",
                    "      groups:\n",
                    "        - system:bootstrappers\n",
                    "        - system:nodes\n"
                  ]
                ]
              mode: "000644"
              owner: root
              group: root
            /home/ec2-user/.kube/config:
              content:
                Fn::Join: [
                  "",
                  [
                    "apiVersion: v1\n",
                    "clusters:\n",
                    "- cluster:\n",
                    "    server: ENDPOINT\n",
                    "    certificate-authority-data: CERTIFICATE_DATA\n",
                    "  name: kubernetes\n",
                    "contexts:\n",
                    "- context:\n",
                    "    cluster: kubernetes\n",
                    "    user: aws\n",
                    "  name: aws\n",
                    "current-context: aws\n",
                    "kind: Config\n",
                    "preferences: {}\n",
                    "users:\n",
                    "- name: aws\n",
                    "  user:\n",
                    "    exec:\n",
                    "      apiVersion: client.authentication.k8s.io/v1alpha1\n",
                    "      command: heptio-authenticator-aws\n",
                    "      args:\n",
                    "        - token\n",
                    "        - -i\n",
                    "        - ", { Ref: "AWS::StackName" }, "-cluster\n",
                  ]
                ]
              mode: "000666"
              owner: ec2-user
              group: ec2-user
          commands:
            bastion-bootstrap:
              command: !Join 
                - ""
                - - "./tmp/bastion_bootstrap.sh"
                  - " --banner https://aws-quickstart.s3.amazonaws.com/quickstart-linux-bastion/scripts/banner_message.txt"
                  - " --enable false"
                  - " --tcp-forwarding false"
                  - " --x11-forwarding false"
            eks-bootstrap:
              command: "./tmp/eks_bootstrap.sh"
    Properties:
      AssociatePublicIpAddress: true
      PlacementTenancy: default
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref BastionInstanceProfile
      ImageId: ami-cfe4b2b0
      SecurityGroups:
        - !Ref BastionSecurityGroup
      InstanceType: t2.micro
      UserData: 
        Fn::Base64:
          Fn::Join: [
            "",
            [
              '#!/bin/bash', "\n",
              'set -x', "\n",
              'export PATH=$PATH:/usr/local/bin', "\n",
              'which pip &> /dev/null', "\n",
              'if [ $? -ne 0 ] ; then', "\n",
              '  echo "PIP NOT INSTALLED"', "\n",
              '  [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"', "\n",
              '  [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"', "\n",
              'fi', "\n",
              'pip install --upgrade pip &> /dev/null', "\n",
              'pip install awscli --ignore-installed six &> /dev/null', "\n",
              'easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz', "\n",
              "MODEL_DIRECTORY_PATH=~/.aws/eks", "\n",
              "MODEL_FILE_PATH=$MODEL_DIRECTORY_PATH/eks-2017-11-01.normal.json", "\n",
              "mkdir -p $MODEL_DIRECTORY_PATH", "\n",
              "curl -o $MODEL_FILE_PATH https://s3-us-west-2.amazonaws.com/amazon-eks/1.10.3/2018-06-05/eks-2017-11-01.normal.json", "\n",
              "aws configure add-model --service-model file://$MODEL_FILE_PATH --service-name eks", "\n",
              'EIP_LIST=', { Ref: "BastionEIP" }, ',Null,Null,Null', "\n",
              'CLOUDWATCHGROUP=', { Ref: "BastionMainLogGroup" }, "\n",
              'curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/bin/linux/amd64/kubectl', "\n",
              'chmod +x ./kubectl', "\n",
              'mv kubectl /usr/local/bin', "\n",
              'kubectl version --short --client', "\n",
              'curl -o heptio-authenticator-aws https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/bin/linux/amd64/heptio-authenticator-aws', "\n",
              'chmod +x ./heptio-authenticator-aws', "\n",
              'mv heptio-authenticator-aws /usr/local/bin', "\n",
              'heptio-authenticator-aws help', "\n",
              'cfn-init -v --stack ', { Ref: "AWS::StackName" }, ' --resource BastionLaunchConfiguration --region ', { Ref: "AWS::Region" }, "\n",
              'cfn-signal -e $? --stack ', { Ref: "AWS::StackName" }, ' --resource BastionAutoScalingGroup --region ', { Ref: "AWS::Region" }, "\n",
            ]
          ]

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-k8s-bastion" 
      GroupDescription: Enables SSH Access to Bastion Hosts
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref RemoteAccessCIDR
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref RemoteAccessCIDR

